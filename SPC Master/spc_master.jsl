/*
*******************************************************************************

 SPC Master for JMP

-------------------------------------------------------------------------------
 MIT License

 Copyright (c) 2021 Keiichi Takahashi

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
*******************************************************************************
*/

// Set namespace to 'Here'
// Name of 'Here' is JMP recommended name for local namespace
Names Default To Here( 1 );

// Application Version
app_ver = "0.5"; // from 22-Jan-2021
// *** v0.5 milestone ***
// add Cpk calculation for non-normal

// JMP version required to run this script
minJMPVerRequired = 14;

// CONSTANT
strPART = "Part Number";
strPARAM = "Parameter Name";
strDIST = "Distribution";
strCTYPE = "Chart Type";
strTEST125 = "Test1,2,5";
strCPK = "Cpk";
strCP = "Cp";
strLCL = "LCL";
strUCL = "UCL";
strLSL = "LSL";
strUSL = "USL";

// Known distionary keys
keyMASTER = "Master";
keyREPORT = "Report";

// Dialog for 'Not Implemented Yet'!
notImplemented = Expr(
	New Window( "Sorry!",
		modal,
		V List Box(
			Spacer Box( size( 5, 10 ) ),
			Text Box( "Not Implemented Yet!" ),
			Text Box( " " ),
			H List Box( Spacer Box( size( 120, 0 ) ), but_ok = Button Box( "OK" ), but_ok << set icon( "RangeCheck" ) )
		)
	)
);

/******************************************************************************
  checkJMPVersion

  description
    Check if current JMP version meets minimum requirement

  arguments
    minJmpVer : minimum major version of JMP

  return
    1 : current JMP version is below requiement
    0 : current JNP version meets requirement to run this application
 ******************************************************************************/
checkJMPVersion = Function( {minJmpVer}, 
	// obtain current JMP version
	verStr = JMP Version();

	// extract major version string with Regular Expression
	matchList = Regex Match( verStr, "^([0-9]+)\.(.+)$" );

	// convert major version string to number
	curMajorVer = Num( matchList[2] );

	// return 1 if current JMP version is below requiement, otherwise return 0
	If( curMajorVer < minJMPVer,
		Return( 1 ),
		Return( 0 )
	);
);

/******************************************************************************
  loadMaster

  description
    Open Master sheet of filename

  arguments
    filename : filename of Excel macro

  return
    data table
 ******************************************************************************/
loadMaster = Function( {filename},
	dt = Open(
		filename,
		invisible,
		Worksheets( "Master" ),
		Use for all sheets( 1 ),
		Concatenate Worksheets( 0 ),
		Create Concatenation Column( 0 ),
		Worksheet Settings(
			1,
			Has Column Headers( 1 ),
			Number of Rows in Headers( 1 ),
			Headers Start on Row( 1 ),
			Data Starts on Row( 2 ),
			Data Starts on Column( 1 ),
			Data Ends on Row( 0 ),
			Data Ends on Column( 0 ),
			Replicated Spanned Rows( 1 ),
			Replicated Spanned Headers( 0 ),
			Suppress Hidden Rows( 1 ),
			Suppress Hidden Columns( 1 ),
			Suppress Empty Columns( 0 ),
			Treat as Hierarchy( 0 ),
			Multiple Series Stack( 0 ),
			Import Cell Colors( 0 ),
			Limit Column Detect( 0 ),
			Column Separator String( "-" )
		)
	);
	Return( dt );
);

/******************************************************************************
  loadPart

  description
    Open specific PART sheet of filename

  arguments
    filename : filename of Excel macro
    partnum  : Part Number

  return
    data table
 ******************************************************************************/
loadPart = Function( {filename, partnum},
	dt = Open(
		filename,
		invisible,
		Worksheets( partnum ),
		Use for all sheets( 1 ),
		Concatenate Worksheets( 0 ),
		Create Concatenation Column( 0 ),
		Worksheet Settings(
			1,
			Has Column Headers( 1 ),
			Number of Rows in Headers( 1 ),
			Headers Start on Row( 2 ),
			Data Starts on Row( 3 ),
			Data Starts on Column( 1 ),
			Data Ends on Row( 0 ),
			Data Ends on Column( 0 ),
			Replicated Spanned Rows( 1 ),
			Replicated Spanned Headers( 0 ),
			Suppress Hidden Rows( 1 ),
			Suppress Hidden Columns( 1 ),
			Suppress Empty Columns( 0 ),
			Treat as Hierarchy( 0 ),
			Multiple Series Stack( 0 ),
			Import Cell Colors( 0 ),
			Limit Column Detect( 0 ),
			Column Separator String( "-" )
		)
	);
	// delete row where 'Data Type' column is 'Hide'
	dt = deleteHideRow( dt );
	dt = setPointColor( dt );
	Return( dt );
);

/******************************************************************************
  deleteEmptyRow

  description
    delete rows where specified column is empty 

  arguments
    dt      : data table
    colname : name of column to check if specified row is empty or not

  return
    (none)
 ******************************************************************************/
deleteEmptyRow = Function( {dt, colname},
	{r},
	rows = N Rows( dt );
	For( r = rows, r > 0, r--,
		pn = Column( colname )[r];
		If( pn == "",
			dt << Delete Rows( r )
		);
	);
);

/******************************************************************************
  deleteHideRow

  description
    delete row where 'Data Type' column is 'Hide' 

  arguments
    dt : data table

  return
    (none)
 ******************************************************************************/
deleteHideRow = Function( {dt},
	{r},
	rows = N Rows( dt );
	For( r = rows, r > 0, r--,
		type = Column( dt, "Data Type" )[r];
		If( type == "Hide",
			dt << Delete Rows( r )
		);
	);
	Return( dt );
);

/******************************************************************************
  setPointColor
 
  description
    Set color of Historic in :Data Type to gray 
 
  arguments
    dt : data table
 
  return
    color defined data table

  reference:
  https://www.jmp.com/china/support/help/13-2/JSG_DataTables_59.shtml
 ******************************************************************************/
setPointColor = Function( {dt},
	dt << New Column( "Row State", Row State, Set Formula( If( :Data Type == "Historic", Color State( 82 ) ) ) );
	Column( "Row State" ) << Copy To Row States();
	Return( dt );
);

/******************************************************************************
  concatTwoCols

  description
    Concatenate 2 columns in to one list 

  arguments
    dt       : data table
    colname1 : name of column 1
    colname2 : name of column 2
    sep      : separater, default = 2 spaces

  return
    list of element of colname1 || sep || element of colname2
 ******************************************************************************/
concatTwoCols = Function( {dt, colname1, colname2, sep = "  "},
	{r},
	rows = N Rows( dt );
	elementList = {};
	For( r = 1, r <= rows, r++,
		item1 = Column( dt, colname1 )[r];
		item2 = Column( dt, colname2 )[r];
		element = Concat Items( {item1, item2}, sep );
		Insert Into( elementList, element );
	);
	Return( elementList );
);

/******************************************************************************
  getCellValue

  description
    Get cell value in specified data table 

  arguments
    dt       : data table
    colname  : NAME of column
    row      : row NUMBER

  return
    velue at specified column name and row
 ******************************************************************************/
getCellValue = Function( {dt, colname, row},
	value = Column( dt, colname )[row];
	Return( value );
);

/******************************************************************************
  countOOC

  description
    Count number of OOC. This is for JMP 14.
    Note: JMP 15 can use Alarm Report().

  arguments
    chart : instance of Control Chart Builder

  return
    OOC count 
 ******************************************************************************/
countOOC = Function( {chart},
	{i},
	dt = chart << Save Summaries();
	listFail = Column( dt, "Test Failures" ) << Get Values();
	count = 0;
	For( i = 1, i <= N Items( listFail ), i++,
		value = listFail[i];
		count = count + If( value == "", 0, 1 );
	);
	Close( dt, "No Save" );
	chart << Close Window();
	Return( count );
);

/******************************************************************************
  spcChart
 
  description
    Plot basic SPC Control Chart
   
  arguments
    dt        : data table
    partnum   : PART No
    paramname : PARAMETER NAME
    lsl       : LSL
    usl       : USL
    type      : "Moving Range" (default), "Levey Jennings"
 
  return
    instance of the SPC Control Chart
 ******************************************************************************/
spcChart = Function( {dt, partnum, paramname, lsl, usl, type = "Moving Range"},
	title = "Control Chart for " || partnum || "  " || paramname;
	Eval(
		Substitute(
				Expr(
					obj = __dt__ << Control Chart Builder(
						Show Two Shewhart Charts( 0 ),
						Show Control Panel( 0 ), 
						Show Capability( 0 ),
						//Show Alarm Report( 1 ), // Valid for JMP 15
						Variables( Y( Column( __param__ ) ) ),
						Chart(
							Points( Statistic( "Individual" ) ),
							Limits( Sigma( __type__ ) ),
							Warnings( Test 1( 1 ), Test 2( 1 ), Test 5( 1 ) ),
							Add Spec Limits( {LSL( __lsl__ ), USL( __usl__ )} )
						),
						SendToReport( Dispatch( {}, "Control Chart Builder", OutlineBox, {Set Title( __title__ )} ), )
					);
					Return( obj );
				),
			Expr( __dt__ ), dt,
			Expr( __title__ ), title,
			Expr( __param__ ), paramname,
			Expr( __lsl__ ), lsl,
			Expr( __usl__ ), usl,
			Expr( __type__ ), type
		)
	);
);

/******************************************************************************
  spcDist
 
  description
    Data distribution and Normality check
   
  arguments
    dt        : data table
    paramname : PARAMETER NAME
 
  return
    instance of the Distribution report
 ******************************************************************************/
spcDist = Function( {dt, partnum, paramname, lsl, usl},
	title = "Distribution for " || partnum || "  " || paramname;
	Eval(
		Substitute(
				Expr(
					obj = __dt__ << Distribution(
						Continuous Distribution(
							Column( __param__ ),
							Quantiles( 0 ),
							Summary Statistics( 0 ),
							Horizontal Layout( 1 ),
							Vertical( 0 ),
							Count Axis( 1 ),
							Normal Quantile Plot( 1 ),
							Fit Distribution( Normal( Spec Limits( LSL( __lsl__ ), USL( __usl__ ) ), Goodness of Fit( 1 ) ) ) // This is JMP 14 style
						),
						SendToReport( Dispatch( {}, "Distributions", OutlineBox, {Set Title( __title__ )} ) )
					);
					Return( obj );
				),
			Expr( __dt__ ), dt,
			Expr( __title__ ), title,
			Expr( __param__ ), paramname,
			Expr( __lsl__ ), lsl,
			Expr( __usl__ ), usl
		)
	);
);

/******************************************************************************
  spcReport

  description
    evaluate control limit

  arguments
    listbox : List Box shown PART NUMBER & PARAMETER NAME

  return
    (none) 
 ******************************************************************************/
spcReport = Function( {listbox},
	{i}, 
	// 'i' is used for loop counter, define valid scope is in this function only
	// for avoiding from variable name conflict with outside functions.
	// JMP namespace is very confusing!!

	// list used in the loop
	listIndex = listbox << Get Selected Indices;
	listItem = listbox << Get Selected;

	// check number of selection on the listbox
	If( N Items( listItem ) == 0,
		Return()
	); // return if no selection on the List Box of the mainWin

	//_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_
	// Empty Windows for Analysis Report
	Here:Report = New Window( "Analysis Report", Show Menu( 1 ), Show Toolbars( 1 ), main = V List Box( summary = H List Box(), tbox = Tab Box() ) );

	// Initial column list for Summary
	listPartnum = {};
	listParamname = {};
	listDist = {};
	listChartType = {};
	listTest125 = {};
	listCp = {};
	listCpk = {};
	listLCL = {};
	listUCL = {};
	listLSL = {};
	listUSL = {};

	// Loop for each SPC parameter
	For( i = 1, i <= N Items( listItem ), i++, 
		// get selected information on the List Box
		idx = listIndex[i];
		report_title = listItem[i];

		// Regular Expression to separate PART NUMBER and PARAMETER NAME
		matchList = Regex Match( report_title, "^(.+)\s{2}(.+)$" );
		partnum = matchList[2];
		paramname = matchList[3];

		/*
		 * JMP Function() can refer variable outside in the same 'Here' namescope. This is confusing!
		 * In other usual language, it does not allow to refer variable outside of the function without special treatment.
		 * In this scripting, intentinally 'Here:' qualifier is added to the variable name outside of this function but in 'Here' namespace.
		 */
		// Spec Limits
		lsl = getCellValue( Here:dict[Here:keyMASTER], Here:strLSL, idx );
		usl = getCellValue( Here:dict[Here:keyMASTER], Here:strUSL, idx );
	
		// Collect information for summary table
		listPartnum = Insert( listPartnum, partnum );
		listParamname = Insert( listParamname, paramname );
		listLSL = Insert( listLSL, lsl );
		listUSL = Insert( listUSL, usl );

		//_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_
		// Distribution
		dist = Expr(
			spcDist( Here:dict[partnum], partnum, paramname, lsl, usl )
		);

		//---------------------------------------------------------------------
		// Obtain result of Shapiro-Wilk test to determin Chart Type
		//
		// CAUTION: THIS IS HARD CODED!! IT DEPENDS ON REPORT LAYOUT
		// *** POTENTIAL JMP VERSION INCOMPATIVILITY COULD EXIST! ***
		reportDist = dist << Report << Minimize Window( 1 );
		prob = reportDist[Outline Box( 7 )][Number Col Box( 2 )] << Get( 1 );
		cp = reportDist[Outline Box( 6 )][Number Col Box( 1 )] << Get( 1 );
		cpk = reportDist[Outline Box( 6 )][Number Col Box( 1 )] << Get( 2 );
		reportDist << Close Window();

		// Normality
		Normality = If( prob > 0.05,
			"Normal",
			"Non-Normal"
		);
		listDist = Insert( listDist, Normality );

		// Chart Type
		chartType = If( prob > 0.05, "LJ", "IR" );
		listChartType = Insert( listChartType, chartType );

		//_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_
		// Control Chart
		type = If( prob > 0.05,
			"Levey Jennings",
			"Moving Range"
		);
		chart = Expr(
			spcChart( Here:dict[partnum], partnum, paramname, lsl, usl, type )
		);

		//---------------------------------------------------------------------
		// Obtain control limits, warnings and indices of process capability
		//
		// CAUTION: THIS IS HARD CODED!! IT DEPENDS ON REPORT LAYOUT
		// *** POTENTIAL JMP VERSION INCOMPATIVILITY COULD EXIST! ***
		reportChart = chart << Report << Minimize Window( 1 );
		lcl = reportChart[Outline Box( 2 )][Number Col Box( 1 )] << Get( 1 );
		ucl = reportChart[Outline Box( 2 )][Number Col Box( 3 )] << Get( 1 );
		//cpk = reportChart[Outline Box( 7 )][Number Col Box( 1 )] << Get( 1 );
		//cp = reportChart[Outline Box( 7 )][Number Col Box( 1 )] << Get( 4 );
		reportChart << Close Window();

		// Add indices for summary table
		listLCL = Insert( listLCL, lcl );
		listUCL = Insert( listUCL, ucl );
		listCpk = Insert( listCpk, cpk );
		listCp = Insert( listCp, cp );

		// Count OOC
		ooc = countOOC( chart );
		ooc_test = If( ooc > 0, "Fail", "Pass" );
		listTest125 = Insert( listTest125, ooc_test );

		// Combine Chart & Distribution
		//
		// reference:
		// https://community.jmp.com/t5/Discussions/For-Loop-inside-a-tab-box-where-each-loop-creates-a-different/td-p/83805
		tbox << Add( report_title, V List Box( chart, dist ) );
	);
	tbox << Set Selected( 1 ); // Show first tab
	

	//_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_
	// Summary Table
	//
	// JMP Function() can refer variable outside in the same 'Here' namescope. This is confusing!
	// In other usual language, it does not allow to refer variable outside of the function without special treatment.
	// In this scripting, intentinally 'Here:' qualifier is added to the variable name outside of this function but in 'Here' namespace.
	tblSummary = Expr(
		Table Box(
			String Col Edit Box( Here:strPART, listPartnum ),
			String Col Edit Box( Here:strPARAM, listParamname ),
			String Col Edit Box( Here:strDIST, listDist ),
			String Col Edit Box( Here:strCTYPE, listChartType ),
			String Col Edit Box( Here:strTEST125, listTest125 ),
			Number Col Edit Box( Here:strCPK, listCpk ),
			Number Col Edit Box( Here:strCP, listCp ),
			Number Col Edit Box( Here:strLCL, listLCL ),
			Number Col Edit Box( Here:strUCL, listUCL ),
			Number Col Edit Box( Here:strLSL, listLSL ),
			Number Col Edit Box( Here:strUSL, listUSL )
		)
	);
	tblSummary << Show Window( 0 );
	summary << Append( Outline Box( "SPC Summary", tblSummary ) );
);

/******************************************************************************
  mainWin

  description
    Generate Main GUI Window

  arguments
    dispList  : list of pair of PART NUMBER & PARAMETER

  return
    instance of this window 
 ******************************************************************************/
mainWin = Function( {dispList},
	win = New Window( Concat Items( {"SPC Master", Here:app_ver}, " " ),
		Show Menu( 0 ),
		Show Toolbars( 0 ),
		H List Box(
			Spacer Box( size( 5, 0 ) ),
			Panel Box( "Parameter", Here:lbox = List Box( dispList, width( 500 ), nLines( 10 ), max selected( N Items( dispList ) ) ) ),
			Panel Box( "Action",
				Lineup Box( N Col( 1 ), 
					// Evaluate CL button
					but_plot = Button Box( "Report", spcReport( Here:lbox ) ), // 'Here:' is needed to pass this to other function from button click.
					but_plot << Set Icon( "FunctionalDataExplorer" ),
					but_plot << Set Icon Location( "left" ), 

					// Quit button
					but_quit = Button Box( "Quit", quitApp() ),
					but_quit << Set Icon( "Close" ),
					but_quit << Set Icon Location( "left" )
				)
			),
			Spacer Box( size( 5, 0 ) )
		)
	);
	Return( win );
);

/******************************************************************************
  quitApp

  description
    Close application

  arguments
    (none)

  return
    (none) 
 ******************************************************************************/
quitApp = Function( {}, 
	// Close all tables stored in the dictionary
	//
	// reference:
	// https://community.jmp.com/t5/JSL-Cookbook/Looping-through-an-Associative-Array-s-elements/ta-p/236892
	For( dt = Here:dict << first, !Is Empty( dt ), dt = Here:dict << next( dt ),
		Try( Close( dt, "No Save" ) )
	);

	// Clode Report Window
	Try( Here:Report << Close Window() );

	// Close Application Window
	Here:winMain << Close Window();
);

/******************************************************************************
  MAIN (Namespace: Here)
 ******************************************************************************/
// Check JMP version
If( checkJMPVersion( minJMPVerRequired ),
	Throw( "!Required JMP version is at least " || Char( minJMPVerRequired ) )
);

//_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_
// Select SPC macro file to read
filename = Pick File(
	"Select SPC macro file", // prompt message
	"", // initial directory
	{"SPC macro file|xlsm", "All files|*"}, // file filter list by extention
	1, // intially selected item
	0, // doesn’t prompt the user to save the file
	"" // file that is selected by default
);

// If filename is empty, script is aborted with alert dialog.
If( filename == "",
	Throw( "!Empty Filename." )
);

//_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_
// Disctonary of data table
//
// For Associative Array
// Reference:
// https://www.jmp.com/support/help/14-2/create-associative-arrays.shtml
dict = Associative Array();

// Open Master sheet of filename and register disctionary
dict[keyMASTER] = loadMaster( filename );

// Delete rows where column 1, "Part Number" is empty 
deleteEmptyRow( dict[keyMASTER], strPART );

//_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_
// Extract list of unique "Part Number" using Associative Array
//
// Note:
// Associative Array allows unique keys and this is a kind of technique
// to extract unique value from list using Associative Array.
//
// Reference:
// https://community.jmp.com/t5/JSL-Cookbook/Get-a-list-of-the-unique-values-in-a-column-matrix-or-list/ta-p/51256
partlist_all = Column( dict[keyMASTER], strPART ) << Get Values;
partlist = Associative Array( partlist_all ) << Get Keys;

// Open data sheet and register instance to disctionary
For( i = 1, i <= N Items( partlist ), i++,
	partnum = partlist[i];
	dict[partnum] = loadPart( filename, partnum );
);

// Concatenate 2 columns in to one list
elementList = concatTwoCols( dict[keyMASTER], strPART, strPARAM );

//_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_
//  Main GUI Window
winMain = mainWin( elementList );

// ---
// END OF PROGRAM
