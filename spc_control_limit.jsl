/*
********************************************************************************

 SPC Control Limit for JMP - SPC Control Limit evaluation tool

--------------------------------------------------------------------------------
 MIT License

 Copyright (c) 2021 Keiichi Takahashi

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
********************************************************************************
*/

// set namespace to Here
// name of 'Here' is JMP recommended name for local namespace
Names Default To Here( 1 );

// Application Version
app_ver = "0.2"; // from 8-Jan-2021

// CONSTANT
strPART = "Part Number";
strPARAM = "Parameter Name";
strDIST = "Distribution";
strCTYPE = "Chart Type";
strTEST125 = "Test 1, 2, 5";
strCPK = "Cpk";
strCP = "Cp";
strLCL = "LCL";
strUCL = "UCL";
strLSL = "LSL";
strUSL = "USL";

// known distionary keys
keyMASTER = "Master";
keyREPORT = "Report";

/*
--------------------------------------------------------------------------------
*** v0.2 milestone ***

implement reporting function for all parameters
--------------------------------------------------------------------------------
*/

// dialog for 'Not Implemented Yet'!
notImplemented = Expr(
	New Window( "Sorry!",
		modal,
		V List Box(
			Spacer Box( size( 5, 10 ) ),
			Text Box( "Not Implemented Yet!" ),
			Text Box( " " ),
			H List Box( Spacer Box( size( 120, 0 ) ), but_ok = Button Box( "OK" ), but_ok << set icon( "RangeCheck" ) )
		)
	)
);

/*******************************************************************************
 loadMaster

 description
   Open Master sheet of filename

 arguments
   filename : filename of Excel macro

 return
   data table
 *******************************************************************************/
loadMaster = Function( {filename},
	{Default Local},
	dt = Open(
		filename,
		invisible,
		Worksheets( Here:keyMASTER ),
		Use for all sheets( 1 ),
		Concatenate Worksheets( 0 ),
		Create Concatenation Column( 0 ),
		Worksheet Settings(
			1,
			Has Column Headers( 1 ),
			Number of Rows in Headers( 1 ),
			Headers Start on Row( 1 ),
			Data Starts on Row( 2 ),
			Data Starts on Column( 1 ),
			Data Ends on Row( 0 ),
			Data Ends on Column( 0 ),
			Replicated Spanned Rows( 1 ),
			Replicated Spanned Headers( 0 ),
			Suppress Hidden Rows( 1 ),
			Suppress Hidden Columns( 1 ),
			Suppress Empty Columns( 0 ),
			Treat as Hierarchy( 0 ),
			Multiple Series Stack( 0 ),
			Import Cell Colors( 0 ),
			Limit Column Detect( 0 ),
			Column Separator String( "-" )
		)
	);
	Return( dt );
);

/*******************************************************************************
 loadPart

 description
   Open specific PART sheet of filename

 arguments
   filename : filename of Excel macro
   partnum  : Part Number

 return
   data table
 *******************************************************************************/
loadPart = Function( {filename, partnum},
	{Default Local},
	dt = Open(
		filename,
		invisible,
		Worksheets( partnum ),
		Use for all sheets( 1 ),
		Concatenate Worksheets( 0 ),
		Create Concatenation Column( 0 ),
		Worksheet Settings(
			1,
			Has Column Headers( 1 ),
			Number of Rows in Headers( 1 ),
			Headers Start on Row( 2 ),
			Data Starts on Row( 3 ),
			Data Starts on Column( 1 ),
			Data Ends on Row( 0 ),
			Data Ends on Column( 0 ),
			Replicated Spanned Rows( 1 ),
			Replicated Spanned Headers( 0 ),
			Suppress Hidden Rows( 1 ),
			Suppress Hidden Columns( 1 ),
			Suppress Empty Columns( 0 ),
			Treat as Hierarchy( 0 ),
			Multiple Series Stack( 0 ),
			Import Cell Colors( 0 ),
			Limit Column Detect( 0 ),
			Column Separator String( "-" )
		)
	);
	Return( dt );
);

/*******************************************************************************
 deleteEmptyRow

 description
   delete rows where specified column is empty 

 arguments
   dt      : data table
   colname : name of column to check if specified row is empty or not

 return
   (none)
 *******************************************************************************/
deleteEmptyRow = Function( {dt, colname},
	{Default Local},
	rows = N Rows( dt );
	For( r = rows, r > 0, r--,
		pn = Column( colname )[r];
		If( pn == "",
			dt << Delete Rows( r )
		);
	);
);

/*******************************************************************************
 concatTwoCols

 description
   Concatenate 2 columns in to one list 

 arguments
   dt       : data table
   colname1 : name of column 1
   colname2 : name of column 2
   sep      : separater, default = 2 spaces

 return
   list of element of colname1 || sep || element of colname2
 *******************************************************************************/
concatTwoCols = Function( {dt, colname1, colname2, sep = "  "},
	{Default Local},
	rows = N Rows( dt );
	elementList = {};
	For( r = 1, r <= rows, r++,
		item1 = Column( dt, colname1 )[r];
		item2 = Column( dt, colname2 )[r];
		//element = name1 || sep || name2;
		element = Concat Items( {item1, item2}, sep );
		Insert Into( elementList, element );
	);
	Return( elementList );
);

/*******************************************************************************
 getCellValue

 description
   Get cell value in specified data table 

 arguments
   dt       : data table
   colname  : NAME of column
   row      : row NUMBER

 return
   velue at specified column name and row
 *******************************************************************************/
getCellValue = Function( {dt, colname, row},
	{Default Local},
	value = Column( dt, colname )[row];
	Return( value );
);

/*******************************************************************************
 spcChart
 
 description
   Plot basic SPC Control Chart
   
 arguments
   dt        : data table
   paramname : PARAMETER NAME
   lsl       : LSL
   usl       : USL
   type      : "Moving Range" (default), "Levey Jennings"
 
 return
   instance of the SPC Control Chart
 *******************************************************************************/
spcChart = Function( {dt, paramname, lsl, usl, type = "Moving Range"},
	{Default Local},
	Eval(
		Substitute(
				Expr(
					obj = __dt__ << Control Chart Builder(
						Show Two Shewhart Charts( 0 ),
						Show Control Panel( 0 ),
						Show Alarm Report( 1 ),
						Variables( Y( Column( __param__ ) ) ),
						Chart(
							Points( Statistic( "Individual" ) ),
							Limits( Sigma( __type__ ), Shade Zones( 1 ), Show Center Line( 1 ) ),
							Warnings( Test 1( 1 ), Test 2( 1 ), Test 5( 1 ) ),
							Add Spec Limits( {LSL( __lsl__ ), USL( __usl__ )} ),
							Process Capability Analysis(
								Process Summary( 0 ),
								Nonconformance( 0 ),
								Within Sigma Capability( 0 ),
								Histogram( 1, Show Within Sigma Density( 0 ) )
							)
						)
					);
					Return( obj );
				),
			Expr( __dt__ ), dt,
			Expr( __param__ ), paramname,
			Expr( __lsl__ ), lsl,
			Expr( __usl__ ), usl,
			Expr( __type__ ), type, 

		)
	)
);

/*******************************************************************************
 spcHist
 
 description
   Data distribution and Normality check
   
 arguments
   dt        : data table
   paramname : PARAMETER NAME
 
 return
   instance of the Distribution report
 *******************************************************************************/
spcHist = Function( {dt, paramname},
	{Default Local},
	Eval(
		Substitute(
				Expr(
					obj = __dt__ << Distribution(
						Continuous Distribution(
							Column( __param__ ),
							Quantiles( 0 ),
							Summary Statistics( 0 ),
							Histogram( 0 ),
							Vertical( 0 ),
							Normal Quantile Plot( 1 ),
							Fit Normal( Goodness of Fit( 1 ) )
						),
						SendToReport( Dispatch( {__param__}, "Compare Distributions", OutlineBox, {Close( 1 )} ) )
					);
					Return( obj );
				),
			Expr( __dt__ ), dt,
			Expr( __param__ ), paramname
		)
	)
);

/*******************************************************************************
 evalCL

 description
   evaluate control limit

 arguments
   listbox : List Box shown PART NUMBER & PARAMETER NAME

 return
   (none) 
 *******************************************************************************/
evalCL = Function( {listbox},
	{Default Local}, 

	listIndex = listbox << Get Selected Indices;
	listItem = listbox << Get Selected;

	// check number of selection on the listbox
	If( N Items( listItem ) == 0,
		Return()
	); // return if no selection on the List Box

	// Empty Windows for Analysis Report
	Here:Report = New Window( "Analysis Report",
		Show Menu( 0 ),
		Show Toolbars( 0 ),
		V List Box( tbox = Tab Box(), summary = H List Box() )
	);

	listPartnum = {};
	listParamname = {};
	listDist = {};
	listChartType = {};
	listTest125 = {};
	listCp = {};
	listCpk = {};
	listLCL = {};
	listUCL = {};
	listLSL = {};
	listUSL = {};

	For( i = 1, i <= N Items( listItem ), i++, 
		// get selected information on the List Box
		idx = listIndex[i];
		report_title = listItem[i];

		// Regular Expression to separate PART NUMBER and PARAMETER NAME
		matchList = Regex Match( report_title, "^(.+)\s{2}(.+)$" );
		partnum = matchList[2];
		paramname = matchList[3];

		// Spec Limits
		lsl = getCellValue( Here:dict[Here:keyMASTER], Here:strLSL, idx );
		usl = getCellValue( Here:dict[Here:keyMASTER], Here:strUSL, idx );
	
		// Collect information for summary table
		listPartnum = Insert( listPartnum, partnum );
		listParamname = Insert( listParamname, paramname );
		listDist = Insert( listDist, "" );
		listChartType = Insert( listChartType, "" );
		listTest125 = Insert( listTest125, "" );
		listCp = Insert( listCp, . );
		listCpk = Insert( listCpk, . );
		listLCL = Insert( listLCL, . );
		listUCL = Insert( listUCL, . );
		listLSL = Insert( listLSL, lsl );
		listUSL = Insert( listUSL, usl );

		//_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
		// Control Chart
		chart = Expr(
			spcChart( Here:dict[partnum], paramname, lsl, usl )
		);

		//_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
		// Histogram
		hist = Expr(
			spcHist( Here:dict[partnum], paramname )
		);

		// Combine Chart & Histogram
		//
		// reference:
		// https://community.jmp.com/t5/Discussions/For-Loop-inside-a-tab-box-where-each-loop-creates-a-different/td-p/83805
		tbox << Add( report_title, H List Box( chart, hist ) );
	);
	
	tbox << Set Selected( 1 );
	
	//_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
	// Summary Table
	tbl_summary = Expr(
		Table Box(
			String Col Edit Box( Here:strPART, listPartnum ),
			String Col Edit Box( Here:strPARAM, listParamname ),
			String Col Edit Box( Here:strDIST, listDist ),
			String Col Edit Box( Here:strCTYPE, listChartType ),
			String Col Edit Box( Here:strTEST125, listTest125 ),
			Number Col Edit Box( Here:strCP, listCp ),
			Number Col Edit Box( Here:strCPK, listCpk ),
			Number Col Edit Box( Here:strLCL, listLCL ),
			Number Col Edit Box( Here:strUCL, listUCL ),
			Number Col Edit Box( Here:strLSL, listLSL ),
			Number Col Edit Box( Here:strUSL, listUSL ), 

		)
	);
	tbl_summary << Show Window( 0 );
	summary << Append( Outline Box( "Summary", tbl_summary ) );
);

/*******************************************************************************
 mainWin

 description
   Generate Main GUI Window

 arguments
   dispList  : list of pair of PART NUMBER & PARAMETER

 return
   instance of this window 
 *******************************************************************************/
mainWin = Function( {dispList},
	{Default Local},
	Here:mw = New Window( Concat Items( {"SPC Control Limit", Here:app_ver}, " " ),
		Show Menu( 0 ),
		Show Toolbars( 0 ),
		H List Box(
			Spacer Box( size( 5, 0 ) ),
			Panel Box( "Parameter", Here:lbox = List Box( dispList, width( 500 ), nLines( 10 ), max selected( N Items( dispList ) ) ) ),
			Panel Box( "Action",
				Lineup Box( N Col( 1 ), 
					// Evaluate CL button
					but_plot = Button Box( "Eval", evalCL( Here:lbox ) ),
					but_plot << Set Icon( "FunctionalDataExplorer" ),
					but_plot << Set Icon Location( "left" ), 
					// Quit button
					but_quit = Button Box( "Quit", quitApp( Here:mw ) ),
					but_quit << Set Icon( "Close" ),
					but_quit << Set Icon Location( "left" )
				)
			),
			Spacer Box( size( 5, 0 ) )
		)
	);
	Return( Here:mw );
);

/*******************************************************************************
 quitApp

 description
   Close application

 arguments
   win  : Application window

 return
   (none) 
 *******************************************************************************/
quitApp = Function( {win},
	{Default Local}, 
	// Close all tables stored in dictionary
	//
	//   reference: https://community.jmp.com/t5/JSL-Cookbook/Looping-through-an-Associative-Array-s-elements/ta-p/236892
	For( dt = Here:dict << first, !Is Empty( dt ), dt = Here:dict << next( dt ),
		Try( Close( dt, "No Save" ) )
	);

	// Clode Report Window
	Try( Here:Report << Close Window() );

	// Close Application Window
	win << Close Window();
);

/*******************************************************************************
  MAIN (Namespace: Here)
 *******************************************************************************/

// select file to read
filename = Pick File(
	"Select SPC macro file", // prompt message
	"", // initial directory
	{"SPC Macro file|xlsm", "All files|*"}, // file filter list by extention
	1, // intially selected item
	0, // doesn’t prompt the user to save the file
	"" // file that is selected by default
);

// If filename is empty, script is aborted with alert dialog.
If( filename == "",
	Throw( "!Empty Filename." )
);

// Disctonary of data table
//
//   For Associative Array
//   Reference: https://www.jmp.com/support/help/14-2/create-associative-arrays.shtml
dict = Associative Array();

// Open Master sheet of filename and register disctionary
dict[keyMASTER] = loadMaster( filename );

// Delete rows where column 1, "Part Number" is empty 
deleteEmptyRow( dict[keyMASTER], strPART );

// Extract list of unique "Part Number" using Associative Array
//   Note:      Associative Array allows unique keys and this is a kind of
//              technique to extract unique value from list using Associative Array.
//
//   Reference: https://community.jmp.com/t5/JSL-Cookbook/Get-a-list-of-the-unique-values-in-a-column-matrix-or-list/ta-p/51256
partlist_all = Column( dict[keyMASTER], strPART ) << Get Values;
partlist = Associative Array( partlist_all ) << Get Keys;

// Open data sheet and register instance to disctionary
For( i = 1, i <= N Items( partlist ), i++,
	partnum = partlist[i];
	dict[partnum] = loadPart( filename, partnum );
);

// Concatenate 2 columns in to one list
elementList = concatTwoCols( dict[keyMASTER], strPART, strPARAM );

//  Main GUI Window
win_main = mainWin( elementList );

// ---
// END OF PROGRAM
