/*
********************************************************************************

 SPC Master for JMP - SPC review tool

--------------------------------------------------------------------------------
 MIT License

 Copyright (c) 2020 Keiichi Takahashi

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
********************************************************************************
*/

// set namespace to local
Names Default To Here( 1 );

// Application Version
app_ver = "0.2";

// dialog for Not Implemented Yet!
notImplemented = Expr(
	New Window( "Sorry!",
		modal,
		V List Box(
			Spacer Box( size( 5, 10 ) ),
			Text Box( "Not Implemented Yet!" ),
			Text Box( " " ),
			H List Box( Spacer Box( size( 120, 0 ) ), but_ok = Button Box( "OK" ), but_ok << set icon( "RangeCheck" ) )
		)
	)
);

/*******************************************************************************
 loadMaster

 description
   Open Master sheet of filename

 arguments
   filename : filename of Excel macro

 return
   data table
 *******************************************************************************/
loadMaster = Function( {filename},
	Return(
		Open(
			filename,
			invisible,
			Worksheets( "Master" ),
			Use for all sheets( 1 ),
			Concatenate Worksheets( 0 ),
			Create Concatenation Column( 0 ),
			Worksheet Settings(
				1,
				Has Column Headers( 1 ),
				Number of Rows in Headers( 1 ),
				Headers Start on Row( 1 ),
				Data Starts on Row( 2 ),
				Data Starts on Column( 1 ),
				Data Ends on Row( 0 ),
				Data Ends on Column( 0 ),
				Replicated Spanned Rows( 1 ),
				Replicated Spanned Headers( 0 ),
				Suppress Hidden Rows( 1 ),
				Suppress Hidden Columns( 1 ),
				Suppress Empty Columns( 0 ),
				Treat as Hierarchy( 0 ),
				Multiple Series Stack( 0 ),
				Import Cell Colors( 0 ),
				Limit Column Detect( 0 ),
				Column Separator String( "-" )
			)
		)
	)
);

/*******************************************************************************
 loadPart

 description
   Open specific PART sheet of filename

 arguments
   filename : filename of Excel macro
   partnum  : Part Number

 return
   data table
 *******************************************************************************/
loadPart = Function( {filename, partnum},
	Return(
		Open(
			filename,
			invisible,
			Worksheets( partnum ),
			Use for all sheets( 1 ),
			Concatenate Worksheets( 0 ),
			Create Concatenation Column( 0 ),
			Worksheet Settings(
				1,
				Has Column Headers( 1 ),
				Number of Rows in Headers( 1 ),
				Headers Start on Row( 2 ),
				Data Starts on Row( 3 ),
				Data Starts on Column( 1 ),
				Data Ends on Row( 0 ),
				Data Ends on Column( 0 ),
				Replicated Spanned Rows( 1 ),
				Replicated Spanned Headers( 0 ),
				Suppress Hidden Rows( 1 ),
				Suppress Hidden Columns( 1 ),
				Suppress Empty Columns( 0 ),
				Treat as Hierarchy( 0 ),
				Multiple Series Stack( 0 ),
				Import Cell Colors( 0 ),
				Limit Column Detect( 0 ),
				Column Separator String( "-" )
			)
		)
	)
);

/*******************************************************************************
 deleteEmptyRow

 description
   delete rows where specified column is empty 

 arguments
   dt      : data table
   colname : name of column to check if specified row is empty or not

 return
   (none)
 *******************************************************************************/
deleteEmptyRow = Function( {dt, colname},
	rows = N Rows( dt );
	For( r = rows, r > 0, r--,
		pn = Column( colname )[r];
		If( pn == "",
			dt << Delete Rows( r )
		);
	);
);

/*******************************************************************************
 concatTwoCols

 description
   generate list of elements concatenated two 

 arguments
   dt       : data table
   colname1 : name of column 1
   colname2 : name of column 2
   sep      : separater, default = 2 spaces

 return
   list of element of colname1 || sep || element of colname2
 *******************************************************************************/
concatTwoCols = Function( {dt, colname1, colname2, sep = "  "},
	rows = N Rows( dt );
	elementList = {};
	For( r = 1, r <= rows, r++,
		item1 = Column( dt, colname1 )[r];
		item2 = Column( dt, colname2 )[r];
		//element = name1 || sep || name2;
		element = Concat Items( {item1, item2}, sep );
		Insert Into( elementList, element );
	);
	Return( elementList );
);

/*******************************************************************************
 getCellValue

 description
   get cell valu in specified data table 

 arguments
   dt       : data table
   colname  : NAME of column
   row      : row NUMBER

 return
   velue at specified column name and row
 *******************************************************************************/
getCellValue = Function( {dt, colname, row},
	value = Column( dt, colname )[row];
	//If( Is Missing( value ),
	//	Print( "Missing" ),
	//	Print( value )
	//);
	Return( value );
);

/*******************************************************************************
  MAIN
 *******************************************************************************/
// select file to read
filename = Pick File(
	"Select SPC macro file",
	"", // no default directory
	{"SPC Macro file|xlsm", "All files|*"},
	1,
	0,
	"" // no default file 
);

// If filename is empty, script is aborted with alert dialog.
If( filename == "",
	Throw( "!Empty Filename." )
);


// disctonary for data table
dict_dt = Associative Array();

// open Master sheet of filename and register disctionary
dict_dt["Master"] = loadMaster( filename );

// delete rows where column 1, "Part Number" is empty 
deleteEmptyRow( dict_dt["Master"], "Part Number" );

// extract list of unique "Part Number" using Associative Array
partlist = Associative Array( Column( dict_dt["Master"], "Part Number" ) << Get Values ) << Get Keys;
// open data sheet and register instance to disctionary
For( i = 1, i <= N Items( partlist ), i++,
	partnum = partlist[i];
	dict_dt[partnum] = loadPart( filename, partnum );
);

// concatate 2 columns in to one list
elementList = concatTwoCols( dict_dt["Master"], "Part Number", "Parameter Name" );

// ---------------------------------------------------------------------------
//  Main Window
win_main = New Window( Concat Items( {"SPC Master", app_ver}, " " ),
	Show Menu( 0 ),
	Show Toolbars( 0 ),
	H List Box(
		Spacer Box( size( 5, 0 ) ),
		Panel Box( "Parameter", lbox = List Box( elementList, width( 500 ), nLines( 10 ), max selected( 1 ) ) ),
		Panel Box( "Action",
			Lineup Box( N Col( 1 ), 
				// SPC warnings
				Panel Box( "Warning",
					cb_test = Check Box( {"Test 1", "Test 2", "Test 3", "Test 4", "Test 5", "Test 6", "Test 7", "Test 8"} ), 
					// SPC Test Rules
					For( i = 1, i <= 8, i++,
						cb_test << Set( i, 0 )
					), 
					// default
					cb_test << Set( 1, 1 )
				),
				Text Box( " " ), 
				// Plot button
				but_plot = Button Box( "Plot",
					If( N Items( lbox << Get Selected Indices ) > 0,
						idx = Eval( lbox << Get Selected Indices )[1];
						graph_title = Eval( lbox << Get Selected )[1];
						// Regular Expression to separate PART NUMBER and PARAMETER NAME
						matchList = Regex Match( graph_title, "^(.+)\s{2}(.+)$" );
						partnum = matchList[2];
						paramname = matchList[3];
						// Spec Limits
						lsl = getCellValue( dict_dt["Master"], "LSL", idx );
						usl = getCellValue( dict_dt["Master"], "USL", idx );
						target = getCellValue( dict_dt["Master"], "Target", idx );

						// Control Limits
						lcl = getCellValue( dict_dt["Master"], "LCL", idx );
						ucl = getCellValue( dict_dt["Master"], "UCL", idx );
						avg = getCellValue( dict_dt["Master"], "Avg", idx );

						// Recent Control Limits
						rlcl = getCellValue( dict_dt["Master"], "RLCL", idx );
						rucl = getCellValue( dict_dt["Master"], "RUCL", idx );
						//ravg = getCellValue( dict_dt["Master"], "R Avg", idx );


						// Apparently, the platform does not parse statements prior to executing them.
						// Therefore, the following Eval/Substitute/Expr methodology is the way to
						// reflect checkbox values to 'Warnings' parameters.
						//
						// Reference:
						// https://community.jmp.com/t5/Discussions/How-to-manage-display-hide-Test-n-in-Warnings-of-Control-Chart/m-p/341481
						Eval(
							Substitute(
									Expr(
										// SPC CHART
										__dt__ << Control Chart Builder(
											Show Two Shewhart Charts( 0 ),
											Show Control Panel( 0 ), 
											//Variables( Y( Column( dict_dt[partnum], paramname ) ) ),
											//Variables( Y( Column( __dt__, __param__ ) ) ),
											Variables( Y( Column( __param__ ) ) ),
											Chart(
												Points( Statistic( "Individual" ) ),
												Limits( Sigma( "Levey Jennings" ) ),
												Warnings(
													Test 1( __test1__ ),
													Test 2( __test2__ ),
													Test 3( __test3__ ),
													Test 4( __test4__ ),
													Test 5( __test5__ ),
													Test 6( __test6__ ),
													Test 7( __test7__ ),
													Test 8( __test8__ ), 

												), 
												// Add Limits( {RLCL( rlcl ), RUCL( rusl )} ),
												Set Control Limits( {LCL( __lcl__ ), UCL( __ucl__ ), Avg( __avg__ )} ),
												Add Spec Limits( {LSL( __lsl__ ), USL( __usl__ ), Target( __target__ )} ),
												Process Capability Analysis(
													Within Sigma Capability( 0 ),
													Histogram( 1, Show Within Sigma Density( 0 ) )
												)
											),
											SendToReport(
												Dispatch(
													{},
													paramname,
													ScaleBox,
													{Add Ref Line( __lsl__, "Solid", "Blue", "LSL", 1 ),
													Add Ref Line( __usl__, "Solid", "Blue", "USL", 1 ),
													Add Ref Line( __target__, "Solid", "Blue", "Target", 1 ),
													Add Ref Line( __lcl__, "Solid", "Red", "LCL", 1 ),
													Add Ref Line( __ucl__, "Solid", "Red", "UCL", 1 ),
													Add Ref Line( __avg__, "Solid", "Green", "Avg", 1 )}
												),
												Dispatch( {}, "graph display 1 title", TextEditBox, {Set Text( __title__ )} ),
												Dispatch( {}, "", AxisBox, {Add Axis Label( "" )} ), 

											)
										)
			
									),
								Expr( __test1__ ), cb_test << Get( 1 ),
								Expr( __test2__ ), cb_test << Get( 2 ),
								Expr( __test3__ ), cb_test << Get( 3 ),
								Expr( __test4__ ), cb_test << Get( 4 ),
								Expr( __test5__ ), cb_test << Get( 5 ),
								Expr( __test6__ ), cb_test << Get( 6 ),
								Expr( __test7__ ), cb_test << Get( 7 ),
								Expr( __test8__ ), cb_test << Get( 8 ),
								Expr( __dt__ ), dict_dt[partnum],
								Expr( __param__ ), paramname,
								Expr( __lcl__ ), lcl,
								Expr( __ucl__ ), ucl,
								Expr( __avg__ ), avg,
								Expr( __lsl__ ), lsl,
								Expr( __usl__ ), usl,
								Expr( __target__ ), target,
								Expr( __title__ ), graph_title, 

							)
						);
					)
				),
				but_plot << Set Icon( "FunctionalDataExplorer" ),
				but_plot << Set Icon Location( "left" ), 
				// Quit button
				but_quit = Button Box( "Quit", win_main << CloseWindow ),
				but_quit << Set Icon( "Close" ),
				but_quit << Set Icon Location( "left" )
			)
		),
		Spacer Box( size( 5, 0 ) )
	)
);
// ---
// END OF PROGRAM
