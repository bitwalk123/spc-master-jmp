/*****************************************************************************
 * SPC Master for JMP, release 0.1
 *
 * created by Keiichi Takahashi
 *****************************************************************************/
// set name space to local
Names Default To Here( 1 );

// debug flag
debug = 0;

// not implemented dialog
notImplemented = Expr(
	New Window( "Sorry!",
		modal,
		V List Box(
			Spacer Box( size( 5, 10 ) ),
			Text Box( "Not Implemented Yet!" ),
			Text Box( " " ),
			H List Box( Spacer Box( size( 120, 0 ) ), but_ok = Button Box( "OK" ), but_ok << set icon( "RangeCheck" ) )
		)
	)
);

/*****************************************************************************
 * loadMaster
 *
 * description
 *   Open Master sheet of filename
 *
 * arguments
 *   filename : filename of Excel macro
 *
 * return
 *   data table
 *****************************************************************************/
loadMaster = Function( {filename},
	Return(
		Open(
			filename,
			invisible,
			Worksheets( "Master" ),
			Use for all sheets( 1 ),
			Concatenate Worksheets( 0 ),
			Create Concatenation Column( 0 ),
			Worksheet Settings(
				1,
				Has Column Headers( 1 ),
				Number of Rows in Headers( 1 ),
				Headers Start on Row( 1 ),
				Data Starts on Row( 2 ),
				Data Starts on Column( 1 ),
				Data Ends on Row( 0 ),
				Data Ends on Column( 0 ),
				Replicated Spanned Rows( 1 ),
				Replicated Spanned Headers( 0 ),
				Suppress Hidden Rows( 1 ),
				Suppress Hidden Columns( 1 ),
				Suppress Empty Columns( 1 ),
				Treat as Hierarchy( 0 ),
				Multiple Series Stack( 0 ),
				Import Cell Colors( 0 ),
				Limit Column Detect( 0 ),
				Column Separator String( "-" )
			)
		)
	)
);

/*****************************************************************************
 * loadPart
 *
 * description
 *   Open specific PART sheet of filename
 *
 * arguments
 *   filename : filename of Excel macro
 *   partnum  : Part Number
 *
 * return
 *   data table
 *****************************************************************************/
loadPart = Function( {filename, partnum},
	Return(
		Open(
			filename,
			invisible,
			Worksheets( partnum ),
			Use for all sheets( 1 ),
			Concatenate Worksheets( 0 ),
			Create Concatenation Column( 0 ),
			Worksheet Settings(
				1,
				Has Column Headers( 1 ),
				Number of Rows in Headers( 1 ),
				Headers Start on Row( 2 ),
				Data Starts on Row( 3 ),
				Data Starts on Column( 1 ),
				Data Ends on Row( 0 ),
				Data Ends on Column( 0 ),
				Replicated Spanned Rows( 1 ),
				Replicated Spanned Headers( 0 ),
				Suppress Hidden Rows( 1 ),
				Suppress Hidden Columns( 1 ),
				Suppress Empty Columns( 1 ),
				Treat as Hierarchy( 0 ),
				Multiple Series Stack( 0 ),
				Import Cell Colors( 0 ),
				Limit Column Detect( 0 ),
				Column Separator String( "-" )
			)
		)
	)
);

/*****************************************************************************
 * deleteEmptyRow
 *
 * description
 *   delete rows where specified column is empty 
 *
 * arguments
 *   dt      : data table
 *   colname : name of column to check if specified row is empty or not
 *
 * return
 *   (none)
 *****************************************************************************/
deleteEmptyRow = Function( {dt, colname},
	rows = N Rows( dt );
	For( r = rows, r > 0, r--,
		pn = Column( colname )[r];
		If( pn == "",
			dt << Delete Rows( r )
		);
	);
);

/*****************************************************************************
 * concatTwoCols
 *
 * description
 *   generate list of elements concatenated two 
 *
 * arguments
 *   dt       : data table
 *   colname1 : name of column 1
 *   colname2 : name of column 2
 *   sep      : separater, default = 2 spaces
 *
 * return
 *   list of element of colname1 || sep || element of colname2
 *****************************************************************************/
concatTwoCols = Function( {dt, colname1, colname2, sep = "  "},
	rows = N Rows( dt );
	elementList = {};
	For( r = 1, r <= rows, r++,
		item1 = Column( dt, colname1 )[r];
		item2 = Column( dt, colname2 )[r];
		//element = name1 || sep || name2;
		element = Concat Items( {item1, item2}, sep );
		Insert Into( elementList, element );
	);
	Return( elementList );
);

/*****************************************************************************
 * getCellValue
 *
 * description
 *   get cell valu in specified data table 
 *
 * arguments
 *   dt       : data table
 *   colname  : NAME of column
 *   row      : row NUMBER
 *
 * return
 *   velue at specified column name and row
 *****************************************************************************/
getCellValue = Function( {dt, colname, row},
	value = Column( dt, colname )[row];
	Return( value );
);

/*****************************************************************************
 * MAIN
 *****************************************************************************/
// select file to read
If( debug == 1,
	filename = "/C:/Users/KTAKAHAS/OneDrive - ASM International/Documents/SPC/Techno Quartz_SPC_20201130_Rev2.0.xlsm",
	filename = Pick File(
		"Select SPC macro file",
		"", // no default directory
		{"SPC Macro file|xlsm", "All files|*"},
		1,
		0,
		"" // no default file 
	);

	// If filename is empty, script is aborted with alert dialog.
	If( filename == "",
		Throw( "!Empty Filename." )
	);
);


// disctonary for data table
dict_dt = Associative Array();

// open Master sheet of filename and register disctionary
dict_dt["Master"] = loadMaster( filename );

// delete rows where column 1, "Part Number" is empty 
deleteEmptyRow( dict_dt["Master"], "Part Number" );

// extract list of unique "Part Number" using Associative Array
partlist = Associative Array( Column( dict_dt["Master"], "Part Number" ) << Get Values ) << Get Keys;
// open data sheet and register disctionary
For( i = 1, i <= N Items( partlist ), i++,
	partnum = partlist[i];
	dict_dt[partnum] = loadPart( filename, partnum );
);

// concatate 2 columns in to one list
elementList = concatTwoCols( dict_dt["Master"], "Part Number", "Parameter Name" );

// ---------------------------------------------------------------------------
// Main Window
win_main = New Window( "SPC Master",
	Show Menu( 0 ),
	Show Toolbars( 0 ),
	H List Box(
		Spacer Box( size( 5, 0 ) ),
		Panel Box( "Parameter", lbox = colListY = List Box( elementList, width( 500 ), nLines( 10 ), max selected( 1 ) ) ),
		Panel Box( "Action",
			Lineup Box( N Col( 1 ),
				Panel Box( "Warning",
					cb = Check Box( {"Test 1", "Test 2", "Test 3", "Test 4", "Test 5", "Test 6", "Test 7", "Test 8"} ),
					cb << Set( 1, 1 ),

				),
				Text Box( " " ),
				but_plot = Button Box( "Plot",
					idx = Eval( colListY << GetSelectedIndices )[1];
					graph_title = Eval( colListY << GetSelected )[1];
					// Regular Expression to separate PART NUMBER and PARAMETER NAME
					matchList = Regex Match( graph_title, "^(.+)\s{2}(.+)$" );
					partnum = matchList[2];
					paramname = matchList[3];
					// Spec Limits
					lsl = getCellValue( dict_dt["Master"], "LSL", idx );
					usl = getCellValue( dict_dt["Master"], "USL", idx );
					target = getCellValue( dict_dt["Master"], "Target", idx );

					// Control Limits
					lcl = getCellValue( dict_dt["Master"], "LCL", idx );
					ucl = getCellValue( dict_dt["Master"], "UCL", idx );
					avg = getCellValue( dict_dt["Master"], "Avg", idx );

					// Recent Control Limits
					rlcl = getCellValue( dict_dt["Master"], "RLCL", idx );
					rucl = getCellValue( dict_dt["Master"], "RUCL", idx );
					ravg = getCellValue( dict_dt["Master"], "R Avg", idx );

					// SPC CHART
					Control Chart Builder(
						Show Two Shewhart Charts( 0 ),
						Show Control Panel( 0 ),
						Variables( Y( Column( dict_dt[partnum], paramname ) ) ),
						Chart(
							Points( Statistic( "Individual" ) ),
							Limits( Sigma( "Levey Jennings" ) ),
							Warnings(
								Test 1( cb << Get(1) ),
								Test 2( cb << Get(2) ),
								Test 3( cb << Get(3) ),
								Test 4( cb << Get(4) ),
								Test 5( cb << Get(5) ),
								Test 6( cb << Get(6) ),
								Test 7( cb << Get(7) ),
								Test 8( cb << Get(8) )
							),
							//Add Limits( {RLCL( rlcl ), RUCL( rusl )} ),
							Set Control Limits( {LCL( lcl ), UCL( ucl ), Avg( avg )} ),
							Add Spec Limits( {LSL( lsl ), USL( usl ), Target( target )} ),
							Process Capability Analysis(
								Within Sigma Capability( 0 ),
								Histogram( 1, Show Within Sigma Density( 0 ) )
							)
						),
						SendToReport(
							Dispatch(
								{},
								paramname,
								ScaleBox,
								{Add Ref Line( lsl, "Solid", "Blue", "LSL", 1 ),
								Add Ref Line( usl, "Solid", "Blue", "USL", 1 ),
								Add Ref Line( target, "Solid", "Blue", "Target", 1 ),
								Add Ref Line( lcl, "Solid", "Red", "LCL", 1 ), Add Ref Line(
									ucl,
									"Solid",
									"Red",
									"UCL",
									1
								), Add Ref Line( avg, "Solid", "Green", "Avg", 1 )}
							),
							Dispatch( {}, "graph display 1 title", TextEditBox, {Set Text( graph_title )} ),
							Dispatch( {}, "", AxisBox, {Add Axis Label( "" )} ), 

						)
					);
				),
				but_plot << set icon( "FunctionalDataExplorer" ),
				but_quit = Button Box( "Quit", win_main << CloseWindow ),
				but_quit << set icon( "Close" )
			)
		),
		Spacer Box( size( 5, 0 ) )
	)
);