/*****************************************************************************
 * SPC Master for JMP, release 0.1
 *
 * created by Keiichi Takahashi
 *****************************************************************************/

// debug flag
debug = 0;

/*****************************************************************************
 * loadMaster
 *
 * description
 *   Open Master sheet of filename
 *
 * arguments
 *   filename : filename of Excel macro
 *
 * return
 *   data table
 *****************************************************************************/
loadMaster = Function( {filename},
	Return(
		Open(
			filename,
			invisible,
			Worksheets( "Master" ),
			Use for all sheets( 1 ),
			Concatenate Worksheets( 0 ),
			Create Concatenation Column( 0 ),
			Worksheet Settings(
				1,
				Has Column Headers( 1 ),
				Number of Rows in Headers( 1 ),
				Headers Start on Row( 1 ),
				Data Starts on Row( 2 ),
				Data Starts on Column( 1 ),
				Data Ends on Row( 0 ),
				Data Ends on Column( 0 ),
				Replicated Spanned Rows( 1 ),
				Replicated Spanned Headers( 0 ),
				Suppress Hidden Rows( 1 ),
				Suppress Hidden Columns( 1 ),
				Suppress Empty Columns( 1 ),
				Treat as Hierarchy( 0 ),
				Multiple Series Stack( 0 ),
				Import Cell Colors( 0 ),
				Limit Column Detect( 0 ),
				Column Separator String( "-" )
			)
		)
	)
);

/*****************************************************************************
 * loadPart
 *
 * description
 *   Open specific PART sheet of filename
 *
 * arguments
 *   filename : filename of Excel macro
 *   partnum  : Part Number
 *
 * return
 *   data table
 *****************************************************************************/
loadPart = Function( {filename, partnum},
	Return(
		Open(
			filename,
			invisible,
			Worksheets( partnum ),
			Use for all sheets( 1 ),
			Concatenate Worksheets( 0 ),
			Create Concatenation Column( 0 ),
			Worksheet Settings(
				1,
				Has Column Headers( 1 ),
				Number of Rows in Headers( 1 ),
				Headers Start on Row( 2 ),
				Data Starts on Row( 3 ),
				Data Starts on Column( 1 ),
				Data Ends on Row( 0 ),
				Data Ends on Column( 0 ),
				Replicated Spanned Rows( 1 ),
				Replicated Spanned Headers( 0 ),
				Suppress Hidden Rows( 1 ),
				Suppress Hidden Columns( 1 ),
				Suppress Empty Columns( 1 ),
				Treat as Hierarchy( 0 ),
				Multiple Series Stack( 0 ),
				Import Cell Colors( 0 ),
				Limit Column Detect( 0 ),
				Column Separator String( "-" )
			)
		)
	)
);

/*****************************************************************************
 * deleteEmptyRow
 *
 * description
 *   delete rows where specified column is empty 
 *
 * arguments
 *   dt      : data table
 *   colname : name of column to check if specified row is empty or not
 *
 * return
 *   (none)
 *****************************************************************************/
deleteEmptyRow = Function( {dt, colname},
	rows = N Rows( dt );
	For( r = rows, r > 0, r--,
		pn = Column( colname )[r];
		If( pn == "",
			dt << Delete Rows( r )
		);
	);
);

/*****************************************************************************
 * findPartParamRow
 *
 * description
 *   find row where specified "Part Number" and "Parameter Name" are matched
 *
 * arguments
 *   dt        : data table
 *   partnum   : Part Number
 *   paramname : Parameter Name
 *
 * return
 *   row number where "Part Number" and "Parameter Name" are matched at first
 *****************************************************************************/
findPartParamRow = Function( {dt, partnum, paramname},
	rows = N Rows( dt );
	For( r = 1, r <= rows, r++,
		part = Column( dt, "Part Number" )[r];
		param = Column( dt, "Parameter Name" )[r];
		If( part == partnum & param == paramname,
			Return( r )
		);
	);
);

/*****************************************************************************
 * MAIN
 *****************************************************************************/
// select file to read
If( debug == 1,
	filename =
	"/C:/Users/KTAKAHAS/OneDrive - ASM International/Documents/SPC/Techno Quartz_SPC_20201130_Rev2.0.xlsm",
	filename = Pick File(
		"Select SPC macro file",
		"", // no default directory
		{"SPC Macro file|xlsm", "All files|*"},
		1,
		0,
		"" // no default file 
	);
	// If filename is empty, script is aborted with alert dialog.
	If( filename == "",
		Throw( "!Empty Filename." )
	);
);

// Open Master sheet of filename
dt_master = loadMaster( filename );

// delete rows where column 1, "Part Number" is empty 
colname = "Part Number";
deleteEmptyRow( dt_master, colname );

// extract list of unique "Part Number" using Associative Array
pnlist = Associative Array( Column( dt_master, "Part Number" ) << Get Values ) <<
Get Keys;

// PART NUMBER loop
n = N Items( pnlist );
For( i = 1, i <= n, i++, 
	/*** PART NUMBER ***/
	partnum = pnlist[i];
	// open PART NUMBER sheet
	dt = loadPart( filename, partnum );
	// delete rows where column 1, "Data Type" is empty
	colname = "Data Type";
	deleteEmptyRow( dt, colname );
	paramlist = dt << Get Column Names( String );

	// PARAMETER NAME loop
	m = N Items( paramlist );
	For( j = 6, j <= m, j++, 
		/*** PARAMETER NAME ***/
		paramname = paramlist[j];
		graph_title = partnum || " " || paramname;
		r = findPartParamRow( dt_master, partnum, paramname );
		lsl = Column( dt_master, "LSL" )[r];
		target = Column( dt_master, "Target" )[r];
		usl = Column( dt_master, "USL" )[r];
		// SPC CHART
		Control Chart Builder(
			invisible,
			Show Two Shewhart Charts( 0 ),
			Show Control Panel( 0 ),
			Variables( Y( Column( dt, paramname ) ) ),
			Chart(
				Points( Statistic( "Individual" ) ),
				Limits( Sigma( "Levey Jennings" ) ),
				Warnings( Test 1( 1 ) ),
				Add Spec Limits( {LSL( lsl ), USL( usl ), Target( target )} ),
				Process Capability Analysis(
					Within Sigma Capability( 0 ),
					Histogram( 1, Show Within Sigma Density( 0 ) )
				)
			),
			SendToReport(
				Dispatch(
					{},
					paramname,
					ScaleBox,
					{Add Ref Line( lsl, "Solid", "Blue", "LSL", 1 ),
					Add Ref Line( usl, "Solid", "Blue", "USL", 1 ),
					Add Ref Line( target, "Solid", "Blue", "Target", 1 )}
				),
				Dispatch(
					{},
					"graph display 1 title",
					TextEditBox,
					{Set Text( graph_title )}
				),
				Dispatch( {}, "", AxisBox, {Add Axis Label( "" )} ),

			), 

		);
	);
);
